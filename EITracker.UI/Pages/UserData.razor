@page "/user-data"
@using EITracker.Models;
@using EITracker.UI.Services;
@inject IUserService userService;
@inject HttpClient Http
<PageTitle>Eco Insight</PageTitle>

<div class="page-header-rect">
    <h1 class="header-text">EI Employees</h1>
</div>

<div class="inbound-container"><div class="add__btn receive-shipment-btn" @onclick="() => Open()">Add Employee</div></div>

@if (userModels == null)
{
    <div class="loader">Loading...</div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Employee Id</th>
                <th>Name</th>
                <th>Email</th>
                <th>Contact</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in userModels)
            {
                <tr>
                    <td>@user.UserId</td>
                    <td>@user.FirstName  @user.LastName</td>
                    <td>@user.Email</td>
                    <td>@user.PhoneNumber</td>
                    <td>
                        <button class="btn btn-sm btn-primary"
                        @onclick="() => EditAsync(user.Id)">
                            Edit
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="modal @userModel" tabindex="1" role="dialog" style="display:@ModalDisplay">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="header-text">User Details</h4>
                    <img src="X-img.png"
                         srcset="X-img2x.png 2x, X-img3x.png 3x"
                         class="X-img" @onclick="() => Close()">

                </div>
                <div class="form-container">
                    <div class="form-group">
                        <label class="md-label" for="FirstName">First Name</label>
                        <input @bind-value="userModel.FirstName" class="md-pop-text" type="text" id="FirstName" name="FirstName">
                    </div>
                    <div class="form-group">
                        <label class="md-label" for="LastName">Last Name</label>
                        <input @bind-value="userModel.LastName" class="md-pop-text" type="text" id="LastName" name="LastName">
                    </div>
                </div>
                @if (userModel.Id == Guid.Empty)
                {
                    <div class="form-container">
                        <div class="form-group">
                            <label class="md-label" for="FirstName">Employee Id</label>
                            <input @bind-value="userModel.UserId" class="md-pop-text" type="text" id="Userid" name="Userid">
                        </div>
                        <div class="form-group">
                            <label class="md-label" for="Pass">Password</label>
                            <input @bind-value="userModel.Password" class="md-pop-text" type="password" id="paswd" name="paswd">
                        </div>
                    </div>

                }
                <div class="form-container">
                    <div class="form-group">
                        <label class="md-label"  for="Email">Email</label>
                        <input @bind-value="userModel.Email" class="md-pop-text" type="text" id="Email" name="Email">
                    </div>
                    <div class="form-group">
                        <label class="md-label" for="Phone">Contact</label>
                        <input @bind-value="userModel.PhoneNumber" class="md-pop-text" type="text" id="Phone" name="Phone">
                    </div>
                </div>
                <div class="form-container">
                    <div class="form-group">
                        <label class="md-label" >Date of Birth</label>
                        <input @bind-value="userModel.DOB" class="md-pop-text" type="date" id="dob" name="dob">
                    </div>
                    <div class="form-group">
                        <label class="md-label" >Date of Jion</label>
                        <input @bind-value="userModel.DOJ" class="md-pop-text" type="date" id="doj" name="doj">
                    </div>
                </div>
                <div class="form-container">
                    <div class="form-group">
                        <label class="md-label" for="Phone">Roles</label>
                        <select @bind="selectedValue" class="md-pop-text" onchange1="OnDropdownChange">
                            @foreach (var item in roles)
                            {
                                <option value="@item">@item</option>
                            }
                        </select>

                    </div>
                </div>


                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Close</button>
                    @if (userModel.Id != Guid.Empty)
                    {
                        <button type="button" class="btn btn-primary" @onclick="() => Update(userModel)">Update</button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-primary" @onclick="() => Post(userModel)">Save</button>
                    }
                </div>
            </div>
        </div>
    </div>

    @if (ShowBackdrop)
    {
        <div class="modal-backdrop fade show"></div>
    }
}


@code {

    private readonly CancellationTokenSource tokenSource = new(TimeSpan.FromSeconds(300));

    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;
    private List<UserModel>? userModels;
    private List<string> roles = new List<string>();
    private UserModel? userModel = new UserModel();
    private string selectedValue = "Default";
    private void OnDropdownChange(ChangeEventArgs e)
    {
        selectedValue = e.Value.ToString();
    }
    protected override async Task OnInitializedAsync()
    {
        await GetAllUsers();
        await GetAllRoles();
    }
    private async Task GetAllUsers()
    {
        userModels = await userService.GetAllUsersAsync();

    }
    private async Task GetAllRoles()
    {
        roles = await userService.GetAllRolesAsync();
    }

    private async Task EditAsync(Guid uid)
    {
        userModel = await userService.GetUserByIdAsync(uid);
        this.Open();
    }

    public void Open()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        userModel = new();
        StateHasChanged();

    }
    public async Task Update(UserModel user)
    {
        userService.PatchUserAsync(user, tokenSource.Token);
        userModels = new List<UserModel>();
        userModels = await userService.GetAllUsersAsync();
        Close();
    }

    public async Task Post(UserModel user)
    {
        user.Roles = new List<string>
        {
            selectedValue
        };
        user.SendEmail = true;
        userService.PostUserAsync(user, tokenSource.Token);
        Close();
    }


}
