@page "/user-data"
@using EITracker.Models;
@using EITracker.UI.Services;
@inject IUserService userService;
@inject HttpClient Http
<PageTitle>Eco Insight</PageTitle>

<div>
    <h1>EI Employees</h1>

</div>



@if (userModels == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Employee Id</th>
                <th>Name</th>
                <th>Email</th>
                <th>Contact</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in userModels)
            {
                <tr>
                    <td>@user.UserId</td>
                    <td>@user.FirstName  @user.LastName</td>
                    <td>@user.Email</td>
                    <td>@user.PhoneNumber</td>                  
                    <td>
                        <button class="btn btn-sm btn-primary"
                        @onclick="() => EditAsync(user.Id)">
                            Edit
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="modal @userModel" tabindex="1" role="dialog" style="display:@ModalDisplay">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">User Details</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => Close()">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <label for="FirstName">FirstName:</label>
                    <input @bind-value="userModel.FirstName" type="text" id="FirstName" name="FirstName"><br><br>
                </div>
                <div class="modal-body">
                    <label for="LastName">LastName:</label>
                    <input @bind-value="userModel.LastName" type="text" id="LastName" name="LastName"><br><br>
                </div>
                <div class="modal-body">
                    <label for="Email">Email:</label>
                    <input @bind-value="userModel.Email" type="text" id="Email" name="Email"><br><br>
                </div>
                <div class="modal-body">
                    <label for="Phone">Contact:</label>
                    <input @bind-value="userModel.PhoneNumber" type="text" id="Phone" name="Phone"><br><br>
                </div>
             
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="() => Done(userModel)">Done</button>
                </div>
            </div>
        </div>
    </div>

    @if (ShowBackdrop)
    {
        <div class="modal-backdrop fade show"></div>
    }
}



@code {

    private readonly CancellationTokenSource tokenSource = new(TimeSpan.FromSeconds(300));

    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;
    private List<UserModel>? userModels;
    private UserModel? userModel = new UserModel();
    protected override async Task OnInitializedAsync()
    {
        await GetAllUsers();
    }
    private async Task GetAllUsers()
    {
        userModels = await userService.GetAllUsersAsync();
    }

    private async Task EditAsync(Guid uid)
    {
        userModel = await userService.GetUserByIdAsync(uid);
        this.Open();
    }

    public void Open()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }
    public void Done(UserModel user)
    {
        userService.PatchUserAsync(user,tokenSource.Token);
        Close();
    }
}
